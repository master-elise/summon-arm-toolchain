#!/bin/bash
# Written by Uwe Hermann <uwe@hermann-uwe.de>, released as public domain.
# Modified by Piotr Esden-Tempski <piotr@esden.net>, released as public domain.
# Modified by Jean-Michel Friedt <friedtj@free.fr>, released as public domain.

#
# Requirements (example is for Debian, replace package names as needed):
#
# apt-get install flex bison libgmp3-dev libmpfr-dev libncurses5-dev \
# libmpc-dev autoconf texinfo build-essential libftdi-dev zlib1g-dev git
#

# Stop if any command fails
set -e

##############################################################################
# Default settings section
# You probably want to customize those
# You can also pass them as parameters to the script
##############################################################################
TARGET=msp430-elf		# Or: TARGET=arm-elf
PREFIX=${HOME}/smt		# Install location of your final toolchain
# DARWIN_OPT_PATH=/usr/local	# Path in which MacPorts or Fink is installed
# Set to 'sudo' if you need superuser privileges while installing
SUDO=
# Set to 1 to be quieter while running
QUIET=0
# Set to 1 to enable building of OpenOCD
OOCD_EN=1
# Set to 'master' or a git revision number to use instead of stable version
OOCD_GIT=
CPUS=

# FTP options ... some environments do not support non-passive FTP
# FETCH_NO_PASSIVE="--no-passive-ftp "
FETCH_NO_CERTCHECK="--no-check-certificate "

##############################################################################
# Parsing command line parameters
##############################################################################

while [ $# -gt 0 ]; do
	case $1 in
		TARGET=*)
		TARGET=$(echo $1 | sed 's,^TARGET=,,')
		;;
		PREFIX=*)
		PREFIX=$(echo $1 | sed 's,^PREFIX=,,')
		;;
#		DARWIN_OPT_PATH=*)
#		DARWIN_OPT_PATH=$(echo $1 | sed 's,^DARWIN_OPT_PATH=,,')
#		;;
		SUDO=*)
		SUDO=$(echo $1 | sed 's,^SUDO=,,')
		;;
		QUIET=*)
		QUIET=$(echo $1 | sed 's,^QUIET=,,')
		;;
		OOCD_EN=*)
		OOCD_EN=$(echo $1 | sed 's,^OOCD_EN=,,')
		;;
		OOCD_GIT=*)
		OOCD_GIT=$(echo $1 | sed 's,^OOCD_GIT=,,')
		;;
		CPUS=*)
		CPUS=$(echo $1 | sed 's,^CPUS=,,')
		;;
		*)
		echo "Unknown parameter: $1"
		exit 1
		;;
	esac

	shift # shifting parameter list to access the next one
done

echo "Settings used for this build are:"
echo "TARGET=$TARGET"
echo "PREFIX=$PREFIX"
#echo "DARWIN_OPT_PATH=$DARWIN_OPT_PATH"
echo "SUDO=$SUDO"
echo "QUIET=$QUIET"
echo "OOCD_EN=$OOCD_EN"
echo "OOCD_GIT=$OOCD_GIT"
echo "CPUS=$CPUS"

##############################################################################
# Version and download url settings section
##############################################################################
# For FSF GCC:
GCCVERSION=14.2.0
GCC=gcc-${GCCVERSION}
GCCURL=http://ftp.gnu.org/gnu/gcc/${GCC}/${GCC}.tar.gz

# For FSF GDB:
GDBVERSION=15.2
GDB=gdb-${GDBVERSION}
GDBURL=http://ftp.gnu.org/gnu/gdb/${GDB}.tar.gz

BINUTILS=binutils-2.43.1
NEWLIB=newlib-4.4.0.20231231
OOCD=openocd-0.6.1
OOCD_GIT=
LIBCMSIS=
LIBCMSIS_GIT=v1.10-4

##############################################################################
# Flags section
##############################################################################

if [ "x${CPUS}" == "x" ]; then
	if which getconf > /dev/null; then
		CPUS=$(getconf _NPROCESSORS_ONLN)
	else
		CPUS=1
	fi

	PARALLEL=-j$((CPUS + 1))
else
	PARALLEL=-j${CPUS}
fi

echo "${CPUS} cpu's detected running make with '${PARALLEL}' flag"

GDBFLAGS=
BINUTILFLAGS=

# Pull in the local configuration, if any
if [ -f local.sh ]; then
    . ./local.sh
fi

MAKEFLAGS=${PARALLEL}
TARFLAGS=v

if [ ${QUIET} != 0 ]; then
    TARFLAGS=
    MAKEFLAGS="${MAKEFLAGS} -s"
fi

export PATH="${PREFIX}/bin:${PATH}"

SUMMON_DIR=$(pwd)
SOURCES=${SUMMON_DIR}/sources
STAMPS=${SUMMON_DIR}/stamps


##############################################################################
# Tool section
##############################################################################
TAR=tar

##############################################################################
# OS and Tooldetection section
# Detects which tools and flags to use
##############################################################################

case "$(uname)" in
	Linux)
	echo "Found Linux OS."
	;;
#	Darwin)
#	echo "Found Darwin OS."
#	GCCFLAGS="${GCCFLAGS} \
#                  --with-gmp=${DARWIN_OPT_PATH} \
#	          --with-mpfr=${DARWIN_OPT_PATH} \
#	          --with-mpc=${DARWIN_OPT_PATH} \
#		  --with-libiconv-prefix=${DARWIN_OPT_PATH}"
#	OOCD_CFLAGS="-I/opt/mine/include -I${DARWIN_OPT_PATH}/include"
#	OOCD_LDFLAGS="-L/opt/mine/lib -L${DARWIN_OPT_PATH}/lib"
#	if gcc --version | grep llvm-gcc > /dev/null ; then
#		echo "Found you are using llvm gcc, switching to clang for gcc compile."
#		GCC_CC=llvm-gcc
#	fi
#	;;
#	CYGWIN*)
#	echo "Found CygWin that means Windows most likely."
#	;;
	*)
	echo "Found unknown OS. Aborting!"
	exit 1
	;;
esac

##############################################################################
# Building section
# You probably don't have to touch anything after this
##############################################################################

# Fetch a versioned file from a URL
function fetch {
    if [ ! -e ${STAMPS}/$1.fetch ]; then
        if [ ! -e ${SOURCES}/$1 ]; then
            log "Downloading $1 sources..."
	    wget -c ${FETCH_NO_PASSIVE} ${FETCH_NO_CERTCHECK} $2 && touch ${STAMPS}/$1.fetch
        fi
    fi
}

function clone {
    local NAME=$1
    local GIT_REF=$2
    local GIT_URL=$3
    local POST_CLONE=$4
    local GIT_SHA=$(git ls-remote ${GIT_URL} ${GIT_REF} | cut -f 1)

    # It seems that the ref is actually a SHA as it could not be found through ls-remote
    if [ "x${GIT_SHA}" == "x" ]; then
        local GIT_SHA=${GIT_REF}
    fi

    # Setting uppercase NAME variable for future use to the source file name
    eval $(echo ${NAME} | tr "[:lower:]" "[:upper:]")=${NAME}-${GIT_SHA}

    # Clone the repository and do all necessary operations until we get an archive
    if [ ! -e ${STAMPS}/${NAME}-${GIT_SHA}.fetch ]; then
        # Making sure there is nothing in our way
        if [ -e ${NAME}-${GIT_SHA} ]; then
            log "The clone directory ${NAME}-${GIT_SHA} already exists, removing..."
            rm -rf ${NAME}-${GIT_SHA}
        fi
        log "Cloning ${NAME}-${GIT_SHA} ..."
        git clone ${GIT_URL} ${NAME}-${GIT_SHA}
        cd ${NAME}-${GIT_SHA}
        log "Checking out the revision ${GIT_REF} with the SHA ${GIT_SHA} ..."
        git checkout -b smt-branch ${GIT_SHA}
	if [ "x${POST_CLONE}" != "x" ]; then
		log "Running post clone code for ${NAME}-${GIT_SHA} ..."
		${POST_CLONE}
	fi
        log "Removing .git directory from ${NAME}-${GIT_SHA} ..."
        rm -rf .git
        cd ..
        log "Generating source archive for ${NAME}-${GIT_SHA} ..."
        tar cfj ${SOURCES}/${NAME}-${GIT_SHA}.tar.bz2 ${NAME}-${GIT_SHA}
        rm -rf ${NAME}-${GIT_SHA}
        touch ${STAMPS}/${NAME}-${GIT_SHA}.fetch
    fi
}

# Log a message out to the console
function log {
    echo "******************************************************************"
    echo "* $*"
    echo "******************************************************************"
}

# Unpack an archive
function unpack {
    log Unpacking $*
    # Use 'auto' mode decompression.  Replace with a switch if tar doesn't support -a
    ARCHIVE=$(ls ${SOURCES}/$1.tar.*)
    case ${ARCHIVE} in
	*.bz2)
	    echo "archive type bz2"
	    TYPE=j
	    ;;
	*.gz)
	    echo "archive type gz"
	    TYPE=z
	    ;;
	*)
	    echo "Unknown archive type of $1"
	    echo ${ARCHIVE}
	    exit 1
	    ;;
    esac
    ${TAR} xf${TYPE}${TARFLAGS} ${SOURCES}/$1.tar.*
}

# Install a build
function install {
    log $1
    ${SUDO} make ${MAKEFLAGS} $2 $3 $4 $5 $6 $7 $8
}


mkdir -p ${STAMPS} ${SOURCES}

cd ${SOURCES}

fetch ${BINUTILS} http://ftp.gnu.org/gnu/binutils/${BINUTILS}.tar.bz2
fetch ${GCC} ${GCCURL}
fetch ${NEWLIB} ftp://sourceware.org/pub/newlib/${NEWLIB}.tar.gz
fetch ${GDB} ${GDBURL}

if [ ${OOCD_EN} != 0 ]; then
	if [ "x${OOCD_GIT}" == "x" ]; then
		fetch ${OOCD} http://sourceforge.net/projects/openocd/files/openocd/0.6.1/${OOCD}.tar.bz2
	else
		clone oocd ${OOCD_GIT} https://openocd.git.sourceforge.net/gitroot/openocd/openocd ./bootstrap
	fi
fi

cd ${SUMMON_DIR}

if [ ! -e build ]; then
    mkdir build
fi

if [ ! -e ${STAMPS}/${BINUTILS}.build ]; then
    unpack ${BINUTILS}
    log "Patching binutils to allow SVC support on cortex-m3"
    cd ${BINUTILS}
    cd ..
    cd build
    log "Configuring ${BINUTILS}"
    ../${BINUTILS}/configure --target=${TARGET} \
                             --prefix=${PREFIX} \
                             --enable-multilib \
                             --with-gnu-as \
                             --with-gnu-ld \
                             --disable-nls \
                             --disable-werror \
                             ${BINUTILFLAGS}
    log "Building ${BINUTILS}"
    make ${MAKEFLAGS}
    install ${BINUTILS} install
    cd ..
    log "Cleaning up ${BINUTILS}"
    touch ${STAMPS}/${BINUTILS}.build
    rm -rf build/* ${BINUTILS}
fi

if [ ! -e ${STAMPS}/${GCC}-${NEWLIB}.build ]; then
    unpack ${GCC}
    unpack ${NEWLIB}

    log "Adding newlib symlink to gcc"
    ln -f -s `pwd`/${NEWLIB}/newlib ${GCC}
    log "Adding libgloss symlink to gcc"
    ln -f -s `pwd`/${NEWLIB}/libgloss ${GCC}

    cd build
    if [ "X${GCC_CC}" != "X" ] ; then
	    export GLOBAL_CC=${CC}
	    log "Overriding the default compiler with: \"${GCC_CC}\""
	    export CC=${GCC_CC}
    fi

    log "Configuring ${GCC} and ${NEWLIB}"
    ../${GCC}/configure --target=${TARGET} \
                      --prefix=${PREFIX} \
                      --enable-multilib \
                      --enable-languages="c,c++" \
                      --with-newlib \
                      --with-gnu-as \
                      --with-gnu-ld \
                      --disable-nls \
                      --disable-shared \
		      --disable-threads \
                      --with-headers=newlib/libc/include \
		      --disable-libssp \
		      --disable-libstdcxx-pch \
		      --disable-libmudflap \
		      --disable-libgomp \
                      --disable-werror \
		      --with-system-zlib \
		      --disable-newlib-supplied-syscalls \
		      ${GCCFLAGS}
    log "Building ${GCC} and ${NEWLIB}"
    make ${MAKEFLAGS}
    install ${GCC} install
    cd ..
    log "Cleaning up ${GCC} and ${NEWLIB}"

    if [ "X${GCC_CC}" != "X" ] ; then
	    unset CC
	    CC=${GLOBAL_CC}
	    unset GLOBAL_CC
    fi

    touch ${STAMPS}/${GCC}-${NEWLIB}.build
    rm -rf build/* ${GCC} ${NEWLIB}
fi

if [ ! -e ${STAMPS}/${GDB}.build ]; then
    unpack ${GDB}
    cd build
    log "Configuring ${GDB}"
    ../${GDB}/configure --target=${TARGET} \
                      --prefix=${PREFIX} \
                      --enable-multilib \
                      --disable-werror \
		      ${GDBFLAGS}
    log "Building ${GDB}"
    make ${MAKEFLAGS}
    install ${GDB} install
    cd ..
    log "Cleaning up ${GDB}"
    touch ${STAMPS}/${GDB}.build
    rm -rf build/* ${GDB}
fi

if [ ${OOCD_EN} != 0 ]; then
if [ ! -e ${STAMPS}/${OOCD}.build ]; then
    unpack ${OOCD}
    cd ${OOCD}
    cd ..
    cd build
    log "Configuring openocd-${OOCD}"
    CFLAGS="${CFLAGS} ${OOCD_CFLAGS}" \
    LDFLAGS="${LDFLAGS} ${OOCD_LDFLAGS}" \
    ../${OOCD}/configure --enable-maintainer-mode \
				 --disable-option-checking \
				 --disable-werror \
				 --prefix=${PREFIX} \
				 --enable-dummy \
				 --enable-ft2232_libftdi \
				 --enable-usb_blaster_libftdi \
				 --enable-ep93xx \
				 --enable-at91rm9200 \
				 --enable-presto_libftdi \
				 --enable-usbprog \
				 --enable-jlink \
				 --enable-vsllink \
				 --enable-rlink # \
#				 --enable-arm-jtag-ew \
#				 --enable-stlink
    log "Building ${OOCD}"
    make ${MAKEFLAGS}
    install ${OOCD} install
    cd ..
    log "Cleaning up ${OOCD}"
    touch ${STAMPS}/${OOCD}.build
    rm -rf build/* ${OOCD}
fi
fi

fetch msp430-support https://dr-download.ti.com/software-development/ide-configuration-compiler-or-debugger/MD-LlCjWuAbzH/9.3.1.2/msp430-gcc-support-files-1.212.zip
unzip msp430-gcc-support-files-1.212.zip
cp -r msp430-gcc-support-files/include/* ${PREFIX}/include
